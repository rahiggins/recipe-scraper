9/?/2025
    Resolve issues 18 1nd 19.
    Change lib.js
    - Require execFileSync from child_process
    - function NewDays
        -- function tableText
            --- Rename function tableText to tableContent
            --- Instead of invoking text() on <td> elements, invoke prop('innerHTML')
            --- In addition to removing newlines and trimming the content of <td> elements,
                - reduce multiple spaces to a single space
                - remove <meta charset> tags inserted by BlueGriffon
                - remove a space that precedes or follows a tag
                - escape single quotes for the shell
            --- Ignore <td> content that consists of only a <br> tag
        -- Remove function addClassName
        -- Change tableText references to tableContent
        -- function processDay
            --- Invoke the diff command to compare the existing table HTML to the new table HTML
        -- Refactor the <tr> element loop so that the code creating the Cheerio query function $tmptbl occurs only once by separating the "if (notFirst && date !== '')" into two if statements.
    Change current.js
        -- Change tableText references to tableContent


8/25/2025
    Update databases directly
    Upgrade packages
        - Cheerio 1.1.2
        - Electron 37.3.0
        - moment 2.30.1
        - puppeteer 24.16.2
        - utf-8-validate 6.0.5
    Add packages
        - dotenv 17.2.1
        - mysql2 3.14.3
    Remove packages
        - request
        - needle
        - cheerio-get-css-selector
    Add file .env containing database credentials
    Change lib.js
    - Require mysql2/promise
    - Remove import of BrowserWindow from electron
    - Remove function Insert and drop Insert from lib.js's exports
    - function NewDays
        -- Make functions NewDays and processDay async
        -- Connect to the local and remote databases
        -- Add Cheerio extension function extractDate that returns an array of date component values for use in SQL statements
        -- Add 'await' to the calls to function processDay
        -- Execute an INSERT or UPDATE SQL statement on the local and remote databases
        -- Eliminate writing SQL statements to the inserts, updates and exports folders
        -- Eliminate the callInsert boolean
        -- End the database connections before returning
    Change current.js
        - Drop function Insert from the lib.js imports
        - function processNewDays
            -- Make .once('continue') function async
            -- Add 'await' to the call to function NewDays
        - Remove the call to function Insert
    Change past.js
        - Drop function Insert from the lib.js imports
        - Make .on('process-year') function async
        - Add 'await' to the call to function NewDays
        - Remove the call to function Insert
    Change index.js
        - Add "require('dotenv').config()" to acquire environment variables from the .env file
    Change .gitignore
        - Add file .env

?/24/2025
    related-links branch
    Change current.js
    - function Mainline
        -- Add function lauchChrome to spawn an instance of Chrome, to create a counters object, to create a Promise with resolvers object and to wait on that object's promise. The counters object is used to keep track of the articles and candidate recipes remaining to be processed. When everything has been processed, the Promise object's promise will be resolved, and launchChrome then sends an 'enable-review' message to the renderer process to enable the Review button.
    - on.'openTP'
        -- Call function launchChrome instead of spawning Chrome
    - on.'process-date'
        -- Call function launchChrome instead of spawning Chrome
    - function requestListener
        -- In case 'articleArray', add the number of articles to the counters object
        -- In case 'artInfo', add 'await' to the call of function artInfo
        -- Add case 'recipeRelatedArticle' to handle a recipe related article object sent by the reportCookingHref userscript.
        -- In function artInfo,
            --- move the response to the POST request to the end of the function,
            --- add the number of candidate recipes found in the article to the counters object
            --- decrement the count of acticles in the counters object
        -- After the POST request has been processed, check the counters object to see if anything remains to be processed and if not, call the Promise object's resolve function.
    Change current-preload.js
        - Add onEnableReview for the enable-review message
    Change current-renderer.js
        - Add onEnableReview to enable the 'Review' button.
        - Add a boolean noArticlesDisplayed initialized to true. It is used in onAddArticles for first-time actions, where it is set to false. It is reset to true in the 'Review' button event listener.
    Change artScrape.javascript
        - Make functions artScrape and getRecipes async.
        - function getRecipes
            -- Add code to extract recipes from div elements of class 'related-links-block'. Objects representing extracted recipes are added to an array, candidatesArray.
            -- Add candidatesArray to the array returned by function getRecipes.
        - Add 'await' to the call to function getRecipes
        - Add the candidates array returned by function getRecipes to the returnObj object.
    Change tpScrape.user.js
        - Move the GM_xmlhttpRequest call to a new async function sendArticleArray, which returns a promise that is resolved by the response to the POST request.
        - After awaiting function sendArticleArray, issue GM_openInTab for each article at 1 second intervals.
    Change Scrape.js
        - Move the GM_xmlhttpRequest call to a new async function sendArticleArray, which returns a promise that is resolved by the response to the POST request. After resolving the promise, open any candidate recipes returned in new tabs.
    Add reportCookingHref.user.js
        - Scrape an NYTCooking recipe for a 'featured in' article and return the result to the recipe-scraper application.
7/17/2025
    Merge the manual click branch into the master branch
7/17/2025
    manual click branch, leverage Cheerio
    Change current.js
        - Packages puppeteer and needle are no longer used.
        - Define a Cheerio query function, $rowTemplate, based on '<tr><td></td><td></td><td></td></tr>'.
        - Instead of setting saveLastDate true in function Mainline when there are dates to process, set saveLastDate true in on.'openTP' and set it false in on.'review' when lastDate.txt has been saved.
        - function requestListener
            -- Remove captcha processing
        - function dayCompare
            -- The function's arguments have changed: instead of strings containing new and old table HTML, the arguments are Cheerio query functions based on the new DOM elements and the old table HTML
            -- Delete the rowText function. Instead, the Cheerio extension function tableText is used to compare the new and old table contents.
            -- Clone the new DOM elements Cheerio query function. Old table rows not in the new table will be merged into the clone. Those rows and new table rows not in the old table are colored in the clone. The clone is used to display the table comparison.
            -- Remove code related to the diffHTML debugging aid.
            -- Change the object returned by the dayCompare function: replace the mergedHTML property with mergedRows whose value if the cloned Cheerio query function (with the coloring removed).
        - on.'review'
            -- Move the definition of variables tpDate and tpYear to the beginning of the on.'review' block so their scope is the entire block
            -- If there were checked articles...
                --- Eliminate the rowHTML variable. 
                --- Instead, create a Cheerio query function, $newDay, based on '<table></table>. For each table row returned by the function review, clone the <tr> element of the $rowTemplate Cheerio function. Assign the returned row content to the clone and append the clone to the <table> element of the $newDay Cheerio query function.
                --- When existing table HTML for the date exists in the Days folder, before calling function dayCompare, create a Cheerio query function, $existingDay, based on the existing table HTML. Call function dayCompare with $newDay and $existingDay as parameters, instead of strings of HTML.
                --- On return from function dayCompare, if the merge action was selected, assign the compareResults.mergedRows value to $newDay.
                --- If the index.html file is to be updated, use the Cheerio extension function formatHTML to log the new day's table HTML.
                --- Call function updateIndexHTML with parameter $newDay in addition to tpDate, tpYear.
            -- If there were no checked articles...
                --- Call function updateIndexHTML with parameter null in addition to tpDate, tpYear.
                --- Tell the renderer to remove all messages and display a message that there were no checked articles and index.html table rows related to the date were removed.
            -- Move the lastDate.txt save out of the 'if (checkedArticleIndices.length > 0)' code blocks.
        - function updateIndexHTML
            -- Rewrite function updateIndexHTML
                --- Load the index.html file into Cheerio and use the Cheerio method replaceWith to replace a day's table row with the table rows in the $newDay query function (or delete the day's table row if none of the day's articles contained recipes).
    Change Scrape.user.js
        - Remove check for captcha.
    Change lib.js
        - Require path and make use of path.join in function NewDays
        - Add Cheerio extension functions tableText and formatHTML. Export both.
        - function NewDays
            -- Delete functions back2NL, findContent, distill.
            -- Replace function addClassName with a Cheerio extension function.
            -- Add function processDay.
            -- Load the index.html file into a Cheerio query function ($year). Extract table rows from $year and iterate through them, constructing a Cheerio query function ($tmptbl) based on the table rows for a day by appending to $tmptbl rows from $year belonging to the same day. Use Cheerio extension function addClassName to ensure the first table row in $tmptbl includes class names.
            -- Call function processDay when all of a day's rows have been appended to $tmptbl.
            -- In function processDay if HTML for the day exists in the Days folder, load that HTML into a Cheerio query function ($day). Use the Cheerio extension fucntion tableText to compare $tmptbl to $day.
            -- In function processDay, use Cheerio extension function formatHTML to create HTML from $tmptbl to write to the Days folder when the day doesn't exist in the Days folder or when $tmptbl and $day differ.
    Change tpScrape.js
        - Handle articles that don't have an author.
    Change review.html and review-renderer.js
        - Add an Embolden menu item to the row menu.

4/24/2025 
    manual click branch, add review/edit window
    Add the fonts directory containing NYT fonts
    Add recipe-table.css, used by the reviewWindow
    Add review.html, review-preload.js, review-renderer.js and reviewStyles.css to suport the new reviewWindow
    Change current.js
        - Add documentaion of the data structures returned by the new review function
        - Add function review to display the extracted articles and recipes for review and editing
        In function Mainline:
            - Change on.submitted handler to on.review
                -- Call function review to display the reviewWindow
                -- Create the day's table HTML from the output of function review
            - Remove messages from the mainWindow before adding the Continue button
    Change current-preload.js
        - Change submitted: to review:
    Change current.html
        - Change Submitted button to Review button
    Change current-renderer.js
        - Change Submitted button to Review button
        - Handle message to remove the datesList when the Cancel button in the reviewWindow is clicked
    Change .gitignore
        - ignore /fonts and tbl-ed.js
    Also:
    Change artScrape.js
        - Change function nameDiffersFromURL
            -- exit immediately with false if the URL does not contain cooking.nytimes.com
    Change tpScrape.user.js
        - Remove code that closes the Today's Paper tab
        

3/27/2025
    manual-click branch initial commit
    Change index.js
        - Move creation of the BrowserWindow for the current mode to current.js
    Change current.html
        - Move <style>...</style> to ScraperStyles.css
        - Add an ArticleTemplate for the article checkboxes previously added through javascript
        - Add an <ul> element to the left of the dateSpec input element and remove the Start button
        - Remove the progressBar div
        - Add a Submit button positioned at the bottom of the window
    Change ScraperStyles.css
        - Add styles moved from current.html
        - Add styles needed to position the Submit buttom at the bottom of the window
    Change current.js
        - Update the code structure, program flow and datga structures documentation
        - Remove module cheerio-get-css-selector
        - Require BrowserWindow from electron
        - Remove function getRandomInt
        - Add function getEpoch, called by function Mainline and .on('process-date')
        In function requestListener:
            - Add function addArticles to add an article to the window
            - Change function artInfo to:
                -- Merge article information from the artObj object corresponding to the received artInfo object into the artInfo object
                -- Call function addArticles to send the artInfo object to the renderer process to add the article to the window
            - Add code to handle the articleArray object sent by the tpScrape userscript
        In function Mainline:
            - Remove the call to connectPup and creation of a BrowserWindow page
            - Remove function addArticles; adding articles to the window is done in function requestListener
            - Remove the code in .on('process-date') that calls TPscrape
            - Move code to determine new dates to process from .on('process-date') to function Mainline
            - Add .on('submitted') to function Mainline to process selected articles
                -- Move the code in function processSelectedArticles to .on('submitted') and delete function        processSelectedArticles
                -- Move the code creating table HTML for an article from .on('process-date') and from function sectionScrape to .on('submitted')
                -- Move code that calls checkExisting, dayCompare and updateHTML and that saves lastDate.txt from .on('process-date') to .on('submitted')
            - Add .on('openTP') to function Mainline to open a Today's Paper page in Google Chrome
            - Change .on('process-date') to handle a date specified in with the date picker by opening the date's Today's Paper page in Google Chrome.
            - Add .on('AOT') to set the window's 'always on top' attribute
            - Add code to create a BrowserWindow
        - Remove function TPscrape
            -- Code in the internal function sectionScrape to collect information from the Today's Paper page is moved to a separate file, tpScrape.js. sectionScrape code to create table HTML is moved to the .on('submitted') routine. 
            -- Checking for redirects is no longer necessary.
    Change current-renderer.js
        - Remove function addProgress
        - Move function articleClick out of function articleListen and change how articleClick gets the article URL
        - Add date to process links to the window
        - Add an eventListener for the list of dates to process. It sends an 'openTP' message to the main process.
        - Remove the Start button eventListener
        - Add a Submit button eventListener. It sends the checkedArticleIndices array to the main process.
        - Remove the .onAddThrobber, .onCreateProgressBar and .onUpdateProgressBar routines
        - Change the .onAddArticles routine:
            -- Remove function articleListen
            -- Instead of building an article checkbox, fill in a cloned article template
        - Add the onUpdateMaxDate routine to update the date picker's maximum value after each date to process has been processed
        - Remove the onEnableStartButton routine
    Change preload.js
        - Get datesToProcess and maxPickableDate values from the process.argv array and those values available to the renderer process
        - Remove unused send channels from the whitelist and add channels 'AOT' and 'openTP'
        - Remove the ipcrenderer.on definitions: onAddThrobber, onCreateProgressBar, onUpdateProgressBar and onEnableStartButton:
    Add tpScrape.js
        - It includes the code from function sectionScrape that collects information from the Today's Paper page, but not the code that creates table HTML. In the included code, Cheerio function are replaced by Javascript functions.
         - tpScrape.js is accessed by the tpScrape userscript via require.
    Add the tpScrape userscript.
    Change artScrape.javascript
        - Document the return object
    

2/14/2025
    Handle captcha pages
    Change Scrape.user.js 
        - If a page has only 1 iFrame, it's a captcha page. Send an object with ID: 'captcha' to the recipe-scraper application
    Change current.js
        - In function requestListener:
            -- handle an object with ID: 'captcha'. Display a 'captcha' message and bring the last tab into focus
            -- for articleInfo object, if a captcha was prec=viously displayed, remove the 'captcha' message
            -- increase the wait interval for Today's Paper page clicks
    Change current.html
        - Add a <div id="progressBar"> after the "msgs" div to contain the progress bar
    Change current-renderer.js
        - Add a div id parameter to the remove-msgs routine so that the progress bar can be removed.

    Handle cooking.nytimes.com articles
    Change artScrape.js
        - Add p.pantry--body-long to the paragraph selector for paragraphs to be searched for recipes 



1/27/2025
    Cater to articles hosted at cooking.nytimes.com
    Change artScrape.js
        - In addition to a <section> named articleBody, also look for recipes in an <article> element.
    Change Scrape.user.js
        - Add @match https://cooking.nytimes.com/article/*

1/5/2025
    Version 2.0.0
    Scrape articles for recipes with a Tampremonkey userscript.

    Upgrade Node to 23.5.0 in order to use Promise.withResolvers
    Install the cheerio-get-css-selector package
    Change current.js
        - Move function artScrape to artScrape.js, which is required in a Tampremonkey userscript, Scrape.
        - Require cheerio-get-css-selector and node:child_process
        - Require function nameDiffersFromURL from artScrape.
        - In function mainline
            -- Set a wide viewport in the remote Chrome instancejs
            -- Start an HTTP server
        - In function sectionScrape
            -- Instead of calling function artScrape, perform a middle click on each article link.
            -- Wait for the response from the userscript Scrape.
            -- Look for redirects from www.nytimes.com to cooking.nytimes.com. This processing was moved from function artScrape to sectionScrape.
            -- If the recipe name is not consistent with the recipe URL, look for a redirect. This processing was moved from function nameDiffersFromURL to sectionScrape.
            -- Use curl via execSync to look for redirects, instead of the request or needle package.
            -- Create table HTML for the article and any recipes. This processing was moved from function artScrape to sectionScrape.
            -- The article objects (artObj) returned are changed.
    Change current-renderer.js
        - In window.scraper.onAddArticles
            -- The input article objects returned by TPScrape are changed
            -- Use the Today's Paper article title when artScrape.js can't find an article title
    Add artScrape.js
        - Move function nameDiffersFromURL out of functon artScrape. In the Node environment, export nameDiffersFromURL.
        - In function nameDiffersFromURL
            -- Move the check for redirects to function sectionScrape
        - In function artScrape
            -- Change the function arguments
            -- Change all uses of Cheerio to javascript querySelector(All)
            -- Add an inconsistency property to the recipe objects that are the elements of the recipeList array.
            -- Change the output from function getTitle from an array to an object
            -- Change the duplicate check. Instead of comparing only adjacent elements, for each element compare all subsequent elements.
            -- Change the object returned 



12/14/2024
    Version 1.1.2
    Change current.js
        - In function artScrape
            -- make function getRecipe async
            -- add async function nameDiffersFromURL to check recipe name/URL consistency
            -- change cheerio.each loops to for loops
            -- call function nameDiffersFromURL for discovered recipe links
            -- flag inconsistent names
            -- for inconsistent h3 links, check for a preceding h2 element with consistent text
            -- in checking for duplicate links, when a duplicate is found, if the first link (which would normally be retained) is flagged as inconsistent, retain the second link instead
            -- add await to getRecipes call
        - In function sectionScrape
            -- in creating an artObj for epoch 3 articles, check for absolute hrefs instead of the usual relative hrefs
                                                                                                 
10/3/2024 
    Version 1.1.1
    Change current.js
        - In function artScrape
            -- change its parameter from a URL to an artObj object
            -- return the values 'title', 'arttype' and 'ATDPresent', instead of setting the value of variables defined in the scope of the calling function
        - In function getTitle
            -- if a title is not recognized on the article page, use the article title from the Today's Paper page
        - Add a delay before navigating to each article to avoid being labeled robot
        - In function getRecipe
            -- change the test for the recipe name being 'View the full recipe' to the recipe name starts with 'View'

6/16/2024
    Restore deleted change-log.txt entries: 4/1/2024, 3/6/2024, 2/16/2024

6/16/2024
    Change current.js
        - Check for captcha and wait for navigation
    Change function getRecipes:
        - Add a check for a <p> element that contains <strong> elements, each of which contains an <a> element that references cooking.nytimes.com/recipes/
        - Fix problem with duplicate checking introduced by 11/6/2023 update: keep track of hrefs added to recipeList and before adding to recipeList, check if its href was already added

4/1/2024
    Change function getRecipes:
        Check whether the text of an h3 link to a recipe starts with 
        'Recipe: '. If so, discard 'Recipe: ' and use the remainder of the text as the recipe name.  

3/6/2024
    Change function getRecipes:
        - Limit the search for recipe links to the <section> element named articleBody.
        - For <p> elements containing 'Recipe[s]:', 'Pairing[s]:, 'Eat:' etc, require those terms to be at the beginning of the text.

2/16/2024
    Change current.js to connect to a remote instance of Chrome.

11/6/2023
    - Change function getRecipes to handle recipe links where the recipe name is
      split between multiple <a> elements.  Also consolidate duplicate href
      checking and consolidate examination of h2 and h3 element checking for
      recipes.
    - Replace ipcMain.on with ipcMain.once in functions processSelectedArticles, 
      processNewDays, createButton, getAction and addArticles.

10/31/2023
    Change function getRecipes to return the expression 'recipeList.length > 0',
    instead of returning a boolean set during the function's processing to avoid
    returning a spurious 'true' values.

10/26/2023
    - Node Intregration disabled and Context Isolation enabled in all renderers.
    - Javascript Standard Style enforced.

9/7/2023
    In current-renderer.js, function getTitle:
        - Handle multiple <a> elements (recipes) within an <h2> element. 

10/15/2021
    In current-renderer.js, function getTitle:
        - Change handling of title decoration
        - Accecpt 'Pairing:' or 'Pairings:' as an indicator or recipe links
    In current-renderer.js, function dayCompare:
        - When comparing row text, remove <br> elements in addition to whitespace
    

10/13/2021
    Merge Epochs branch to master

05/18/2021
    Change the minimum valid date for the dateSpec date-picker in current.html
    to 2018-02-04.  The format of the Today's Paper article lists changed on 
    2018-02-04, and the code in the sectionScrape function does not work on 
    the earlier format.
    - Change current-renderer.js to remove the statements that read the NYT Recipes 
        directory to find the earliest year.  Set dateSpec.min to '2018-02-04'.

02/24/2021
    Consolidate Cheerio HTML loads and check for duplicate recipe links in an article
    - Updated current-renderer.js function artScrape to load article page HTML into a Cheerio object and
        pass that object to subfunctions getTitle and getRecipe, instead of passing the article page HTML
        to those subfunctions
    - Updated current-renderer.js function TPScrape to load Today's Paper HTML into a Cheerio and pass that
        object to subfunction sectionScrape, instead of passing the Today's Paper HTML to that subfunction
    - Updated current-renderer.js function artScrape subfunction getRecipe to check the recipeList array
        for a duplicate recipe link before pushing a recipe object to the array

02/19/2021
    Add support for recipe links in H3 elments
    - Updated the GetRecipes function in current-renderer.js to look for recipe links in H3 elements and also
    - Updated GetRecipes to always check for all recipe link types, instead of checking a link type only 
        if the prior test for a link type found no instances.

02/05/2021
    When an existing day is changed, rename existing Days file to Old_yyyy-mm-dd.txt 
    and write updated file as yyyy-mm-dd.txt, instead of writing updated file to
    NotSame_yyyy-mm-dd.txt
    - Updated lib.js NewDays function 

01/31/2021
    Replace app.remote with handle/invoke
    - Updated index.js to add ipcMain.handle to return appPath and appName
    - Updated current-renderer.js to replace app.remote with ipcRenderer.invoke

01/28/2021
    Added support for HTML markup pasted into BluGriffon from recipe-searcher
    - Updated NewDays function in lib.js to remove a line containing <meta charset= >
        (added by BlueGriffon) before comparing for changes and before writing to ./Days

10/07/2020
    Added support for past years. The application now presents a choice between
    processing the current year or past years.  If the current year is chosen, the
    application proceeds as before.  If past years is chosen, a window soliciting
    the year is displayed, and then the NewDays function and insert.php are invoked.

    - index.html and renderer.js were renamed to current-index.html and current-renderer.js
    - current-index.html was changed to require current-renderer.js
    - index.html was changed to present 'current' and 'past' buttons and to
        require index-renderer.js
    - index-renderer.js was added to direct index.js to open a browser window for
        either current.html or past.html
    - index.js was changed to listen for the current/past choice from 
        index-renderer.js via IPC and to open either current.html or past.html
    - past.html and past-renderer.js were added
    - functions NewDays, addMsg, remvAllMsg were moved from current-renderer.js
        to lib.js
    - the 'insert-closed' and 'invoke-insert' ipcRenderer statements were moved 
        to lib.js as function Insert
    - current-renderer.js was changed to require lib.js